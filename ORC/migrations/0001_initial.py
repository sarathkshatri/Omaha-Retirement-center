# Generated by Django 2.1.5 on 2019-12-15 01:00

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipment_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('equipment_serialnumber', models.CharField(max_length=10)),
                ('equipment_name', models.CharField(max_length=10)),
                ('equipment_description', models.CharField(max_length=50)),
                ('is_available', models.BooleanField(default=True)),
                ('equipment_cost', models.IntegerField()),
                ('equipment_purchasedate', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipment',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceWork',
            fields=[
                ('maintenancework_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('maintenancework_description', models.CharField(max_length=50)),
                ('maintenancework_cost', models.IntegerField()),
                ('maintenancework_opendate', models.DateTimeField(default=django.utils.timezone.now)),
                ('maintenancework_duedate', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_open', models.BooleanField(default=True)),
                ('maintenancework_closedate', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('equipment_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mw4', to='ORC.Equipment')),
            ],
            options={
                'verbose_name': 'MaintenanceWork',
                'verbose_name_plural': 'MaintenanceWork',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceWorker',
            fields=[
                ('worker_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('maintenanceworker_name', models.CharField(max_length=50)),
                ('worker_emailaddress', models.CharField(max_length=50)),
                ('worker_address', models.CharField(max_length=50)),
                ('worker_yearsofexperience', models.IntegerField()),
                ('worker_contactdetails', models.CharField(max_length=10)),
                ('worker_startdate', models.DateField(default=django.utils.timezone.now)),
                ('worker_enddate', models.DateField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'MaintenanceWorker',
                'verbose_name_plural': 'MaintenanceWorker',
            },
        ),
        migrations.CreateModel(
            name='Orc_Staff',
            fields=[
                ('orc_staff_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('orc_staff_name', models.CharField(max_length=50)),
                ('orc_staff_emailaddress', models.CharField(max_length=50)),
                ('orc_staff_address', models.CharField(max_length=50)),
                ('orc_staff_yearsofexperience', models.IntegerField()),
                ('orc_staff_contactdetails', models.CharField(max_length=10)),
                ('orc_staff_position', models.CharField(max_length=50)),
                ('orc_staff_startdate', models.DateTimeField(default=django.utils.timezone.now)),
                ('orc_staff_enddate', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Orc_Staff',
                'verbose_name_plural': 'Orc_Staff',
            },
        ),
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('resident_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('resident_name', models.CharField(max_length=50)),
                ('resident_occupation', models.CharField(max_length=50)),
                ('resident_emailaddress', models.CharField(max_length=50)),
                ('resident_marital_status', models.CharField(choices=[('--', '--'), ('Single', 'Single'), ('Married', 'Married')], default='--', max_length=50)),
                ('resident_familymember_count', models.IntegerField()),
                ('resident_petdetails', models.CharField(max_length=50)),
                ('resident_contactdetails', models.CharField(max_length=10)),
                ('resident_startdate', models.DateField(default=django.utils.timezone.now)),
                ('resident_enddate', models.DateField(default=django.utils.timezone.now)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Resident',
                'verbose_name_plural': 'Resident',
            },
        ),
        migrations.CreateModel(
            name='Roomallotment',
            fields=[
                ('allotment_id', models.AutoField(auto_created=True, max_length=6, primary_key=True, serialize=False)),
                ('property_number', models.CharField(choices=[('--', '--'), ('Atlas101', 'Atlas101'), ('Atlas102', 'Atlas102'), ('Atlas103', 'Atlas103'), ('Atlas104', 'Atlas104'), ('Atlas201', 'Atlas201'), ('Atlas202', 'Atlas202'), ('Atlas203', 'Atlas203'), ('Atlas204', 'Atlas204'), ('Atlas301', 'Atlas301'), ('Atlas302', 'Atlas302'), ('Atlas303', 'Atlas303'), ('Atlas304', 'Atlas304'), ('Atlas401', 'Atlas401'), ('Atlas402', 'Atlas402'), ('Atlas403', 'Atlas403'), ('Atlas404', 'Atlas404'), ('Brook101', 'Brook101'), ('Brook102', 'Brook102'), ('Brook103', 'Brook103'), ('Brook104', 'Brook104'), ('Brook201', 'Brook201'), ('Brook202', 'Brook202'), ('Brook203', 'Brook203'), ('Brook204', 'Brook204'), ('Brook301', 'Brook301'), ('Brook302', 'Brook302'), ('Brook303', 'Brook303'), ('Brook304', 'Brook304'), ('Brook401', 'Brook401'), ('Brook402', 'Brook402'), ('Brook403', 'Brook403'), ('Brook404', 'Brook404'), ('AON101', 'AON101'), ('AON102', 'AON102'), ('AON103', 'AON103'), ('AON104', 'AON104'), ('AON201', 'AON201'), ('AON202', 'AON202'), ('AON203', 'AON203'), ('AON204', 'AON204'), ('AON301', 'AON301'), ('AON302', 'AON302'), ('AON303', 'AON303'), ('AON304', 'AON304'), ('AON401', 'AON401'), ('AON402', 'AON402'), ('AON403', 'AON403'), ('AON404', 'AON404')], default='--', max_length=50)),
                ('property_floor', models.CharField(choices=[('--', '--'), ('Lower Ground', 'Lower Ground'), ('Ground', 'Ground'), ('First', 'First'), ('Second', 'Second')], default='--', max_length=50)),
                ('allotment_startdate', models.DateTimeField(default=datetime.datetime(2019, 12, 15, 1, 0, 38, 822613, tzinfo=utc))),
                ('allotment_enddate', models.DateTimeField(default=datetime.datetime(2019, 12, 15, 1, 0, 38, 822613, tzinfo=utc))),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('resident_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residents1', to='ORC.Resident')),
            ],
            options={
                'verbose_name': 'Roomallotment',
                'verbose_name_plural': 'Roomallotment',
            },
        ),
        migrations.CreateModel(
            name='Workorder',
            fields=[
                ('workorder_id', models.IntegerField(primary_key=True, serialize=False)),
                ('workorder_Description', models.CharField(max_length=50)),
                ('workorder_category', models.CharField(choices=[('--', '--'), ('Household Appliances', 'Household Appliances'), ('Furniture Repair', 'Furniture Repair'), ('Plumbling', 'Plumbling'), ('Pest Control', 'Pest Control'), ('Other Maintenance Work', 'Other Maintenance Work')], default='--', max_length=50)),
                ('workorder_priority', models.CharField(choices=[('--', '--'), ('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], default='--', max_length=50)),
                ('workorder_opendate', models.DateTimeField(default=django.utils.timezone.now)),
                ('workorder_duedate', models.DateTimeField(default=django.utils.timezone.now)),
                ('workorder_closedate', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_open', models.BooleanField(default=True)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('property_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wo1', to='ORC.Roomallotment')),
                ('resident_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resid', to='ORC.Resident')),
                ('resident_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resname', to='ORC.Resident')),
            ],
            options={
                'verbose_name': 'Workorder',
                'verbose_name_plural': 'Workorder',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='resident',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='orc_staff',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='maintenanceworker',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='maintenancework',
            name='maintenanceworker_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mw2', to='ORC.MaintenanceWorker'),
        ),
        migrations.AddField(
            model_name='maintenancework',
            name='property_number',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mw3', to='ORC.Roomallotment'),
        ),
        migrations.AddField(
            model_name='maintenancework',
            name='residentid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residentid', to='ORC.Resident'),
        ),
        migrations.AddField(
            model_name='maintenancework',
            name='worker_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ORC.MaintenanceWorker'),
        ),
        migrations.AddField(
            model_name='maintenancework',
            name='workorder_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mw1', to='ORC.Workorder'),
        ),
    ]
